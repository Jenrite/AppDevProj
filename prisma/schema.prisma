// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id        Int      @id @default(autoincrement())
  title     String
  pub_year  DateTime
  on_hold   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Author    Author?  @relation(fields: [authorId], references: [id])
  authorId  Int?
  Genre     Genre?   @relation(fields: [genreId], references: [id])
  genreId   Int?
  Loan      Loan[]
  Library   Library? @relation(fields: [libraryId], references: [id])
  libraryId Int?
}

model Author {
  id         Int       @id @default(autoincrement())
  first_name String
  last_name  String
  birth_date DateTime
  death_date DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  books      Book[]
}

model Genre {
  id         Int      @id @default(autoincrement())
  genre_name String
  book_num   String
  language   String
  fiction    Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  books      Book[]
}

model Member {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  status     Status
  date_join  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Loan       Loan[]
}

model Loan {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id])
  member    Member   @relation(fields: [memberId], references: [id])
  loan_date DateTime
  return_by DateTime
  library   Library  @relation(fields: [libraryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    Int
  libraryId Int
    Int
}

model Library {
  id        Int      @id @default(autoincrement())
  address   String
  city      String
  post_code Int
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loan      Loan[]
}

enum Status {
  valid
  invalid
}
